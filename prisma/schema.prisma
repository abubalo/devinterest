datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @unique @default(cuid())
  name      String   @db.VarChar(100)
  bio       String
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(30)
  gender    String?
  image String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower  User[] @relation("following")
  following User[] @relation("following")

  posts    Post[]
  messages Message[]
  chats    Chat[]
  comments Comment[]

  @@map("user")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Profile {
  id     String @id @unique @default(cuid())
  bio    String
  gender String

  // user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("profile")
}

model Post {
  id        String   @id @unique @default(cuid())
  title     String   @db.VarChar(250)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  likes    Like[]
  tags     Tag[]     @relation("Posts")

  @@map("post")
}

model Like{
  id Int @id @unique @default(autoincrement())
  post Post? @relation(fields: [postId], references: [id])
  comment Comment @relation(fields:[commentId], references: [id])
  postId String?
  commentId String

  @@map("like")
}

model Comment {
  id        String   @id @unique @default(cuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  like Like[] 
  postId    String   @unique

  replyId String   @unique
  replies Comment? @relation("Replies", fields: [replyId], references: [id])

  ParentComment Comment? @relation("Replies")

  @@map("comment")
}

model Tag {
  id     Int    @id @unique @default(autoincrement())
  name   String @unique @db.VarChar(15)
  posts  Post   @relation("Posts", references: [id], fields: [postId])
  postId String

  @@map("tag")
}
model Chat {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())

  messages Message[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
  chatId String

  @@map("chat")
}

model Message {
  id        String   @id @unique @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String

  @@map("message")
}
